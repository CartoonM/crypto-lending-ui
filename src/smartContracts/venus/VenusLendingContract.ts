/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace VTokenInterface {
  export type RiskManagementInitStruct = {
    shortfall: AddressLike;
    protocolShareReserve: AddressLike;
  };

  export type RiskManagementInitStructOutput = [
    shortfall: string,
    protocolShareReserve: string
  ] & { shortfall: string; protocolShareReserve: string };
}

export interface VenusLendingContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NO_ERROR"
      | "acceptOwnership"
      | "accessControlManager"
      | "accrualBlockNumber"
      | "accrueInterest"
      | "addReserves"
      | "allowance"
      | "approve"
      | "badDebt"
      | "badDebtRecovered"
      | "balanceOf"
      | "balanceOfUnderlying"
      | "blocksOrSecondsPerYear"
      | "borrow"
      | "borrowBalanceCurrent"
      | "borrowBalanceStored"
      | "borrowBehalf"
      | "borrowIndex"
      | "borrowRatePerBlock"
      | "comptroller"
      | "decimals"
      | "decreaseAllowance"
      | "exchangeRateCurrent"
      | "exchangeRateStored"
      | "forceLiquidateBorrow"
      | "getAccountSnapshot"
      | "getBlockNumberOrTimestamp"
      | "getCash"
      | "healBorrow"
      | "increaseAllowance"
      | "initialize"
      | "interestRateModel"
      | "isTimeBased"
      | "isVToken"
      | "liquidateBorrow"
      | "mint"
      | "mintBehalf"
      | "name"
      | "owner"
      | "pendingOwner"
      | "protocolSeizeShareMantissa"
      | "protocolShareReserve"
      | "redeem"
      | "redeemBehalf"
      | "redeemUnderlying"
      | "redeemUnderlyingBehalf"
      | "reduceReserves"
      | "reduceReservesBlockDelta"
      | "reduceReservesBlockNumber"
      | "renounceOwnership"
      | "repayBorrow"
      | "repayBorrowBehalf"
      | "reserveFactorMantissa"
      | "seize"
      | "setAccessControlManager"
      | "setInterestRateModel"
      | "setProtocolSeizeShare"
      | "setProtocolShareReserve"
      | "setReduceReservesBlockDelta"
      | "setReserveFactor"
      | "setShortfallContract"
      | "shortfall"
      | "supplyRatePerBlock"
      | "sweepToken"
      | "symbol"
      | "totalBorrows"
      | "totalBorrowsCurrent"
      | "totalReserves"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "underlying"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccrueInterest"
      | "Approval"
      | "BadDebtIncreased"
      | "BadDebtRecovered"
      | "Borrow"
      | "HealBorrow"
      | "Initialized"
      | "LiquidateBorrow"
      | "Mint"
      | "NewAccessControlManager"
      | "NewComptroller"
      | "NewMarketInterestRateModel"
      | "NewProtocolSeizeShare"
      | "NewProtocolShareReserve"
      | "NewReduceReservesBlockDelta"
      | "NewReserveFactor"
      | "NewShortfallContract"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "ProtocolSeize"
      | "Redeem"
      | "RepayBorrow"
      | "ReservesAdded"
      | "SpreadReservesReduced"
      | "SweepToken"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NO_ERROR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessControlManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrualBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "badDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "badDebtRecovered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blocksOrSecondsPerYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceCurrent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceStored",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBehalf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceLiquidateBorrow",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountSnapshot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumberOrTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "healBorrow",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      AddressLike,
      AddressLike,
      VTokenInterface.RiskManagementInitStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTimeBased",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isVToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrow",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mintBehalf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolSeizeShareMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolShareReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemBehalf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlyingBehalf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reduceReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reduceReservesBlockDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reduceReservesBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowBehalf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessControlManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateModel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolSeizeShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolShareReserve",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReduceReservesBlockDelta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShortfallContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "shortfall", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supplyRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBorrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowsCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NO_ERROR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessControlManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrualBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "badDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "badDebtRecovered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blocksOrSecondsPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceLiquidateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumberOrTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "healBorrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTimeBased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBehalf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolSeizeShareMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolShareReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlyingBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reduceReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reduceReservesBlockDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reduceReservesBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccessControlManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolSeizeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolShareReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReduceReservesBlockDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShortfallContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shortfall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowsCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
}

export namespace AccrueInterestEvent {
  export type InputTuple = [
    cashPrior: BigNumberish,
    interestAccumulated: BigNumberish,
    borrowIndex: BigNumberish,
    totalBorrows: BigNumberish
  ];
  export type OutputTuple = [
    cashPrior: bigint,
    interestAccumulated: bigint,
    borrowIndex: bigint,
    totalBorrows: bigint
  ];
  export interface OutputObject {
    cashPrior: bigint;
    interestAccumulated: bigint;
    borrowIndex: bigint;
    totalBorrows: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadDebtIncreasedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    badDebtDelta: BigNumberish,
    badDebtOld: BigNumberish,
    badDebtNew: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    badDebtDelta: bigint,
    badDebtOld: bigint,
    badDebtNew: bigint
  ];
  export interface OutputObject {
    borrower: string;
    badDebtDelta: bigint;
    badDebtOld: bigint;
    badDebtNew: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadDebtRecoveredEvent {
  export type InputTuple = [badDebtOld: BigNumberish, badDebtNew: BigNumberish];
  export type OutputTuple = [badDebtOld: bigint, badDebtNew: bigint];
  export interface OutputObject {
    badDebtOld: bigint;
    badDebtNew: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    borrower: AddressLike,
    borrowAmount: BigNumberish,
    accountBorrows: BigNumberish,
    totalBorrows: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    borrowAmount: bigint,
    accountBorrows: bigint,
    totalBorrows: bigint
  ];
  export interface OutputObject {
    borrower: string;
    borrowAmount: bigint;
    accountBorrows: bigint;
    totalBorrows: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HealBorrowEvent {
  export type InputTuple = [
    payer: AddressLike,
    borrower: AddressLike,
    repayAmount: BigNumberish
  ];
  export type OutputTuple = [
    payer: string,
    borrower: string,
    repayAmount: bigint
  ];
  export interface OutputObject {
    payer: string;
    borrower: string;
    repayAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateBorrowEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    borrower: AddressLike,
    repayAmount: BigNumberish,
    vTokenCollateral: AddressLike,
    seizeTokens: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    borrower: string,
    repayAmount: bigint,
    vTokenCollateral: string,
    seizeTokens: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    borrower: string;
    repayAmount: bigint;
    vTokenCollateral: string;
    seizeTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    minter: AddressLike,
    mintAmount: BigNumberish,
    mintTokens: BigNumberish,
    accountBalance: BigNumberish
  ];
  export type OutputTuple = [
    minter: string,
    mintAmount: bigint,
    mintTokens: bigint,
    accountBalance: bigint
  ];
  export interface OutputObject {
    minter: string;
    mintAmount: bigint;
    mintTokens: bigint;
    accountBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAccessControlManagerEvent {
  export type InputTuple = [
    oldAccessControlManager: AddressLike,
    newAccessControlManager: AddressLike
  ];
  export type OutputTuple = [
    oldAccessControlManager: string,
    newAccessControlManager: string
  ];
  export interface OutputObject {
    oldAccessControlManager: string;
    newAccessControlManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewComptrollerEvent {
  export type InputTuple = [
    oldComptroller: AddressLike,
    newComptroller: AddressLike
  ];
  export type OutputTuple = [oldComptroller: string, newComptroller: string];
  export interface OutputObject {
    oldComptroller: string;
    newComptroller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMarketInterestRateModelEvent {
  export type InputTuple = [
    oldInterestRateModel: AddressLike,
    newInterestRateModel: AddressLike
  ];
  export type OutputTuple = [
    oldInterestRateModel: string,
    newInterestRateModel: string
  ];
  export interface OutputObject {
    oldInterestRateModel: string;
    newInterestRateModel: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewProtocolSeizeShareEvent {
  export type InputTuple = [
    oldProtocolSeizeShareMantissa: BigNumberish,
    newProtocolSeizeShareMantissa: BigNumberish
  ];
  export type OutputTuple = [
    oldProtocolSeizeShareMantissa: bigint,
    newProtocolSeizeShareMantissa: bigint
  ];
  export interface OutputObject {
    oldProtocolSeizeShareMantissa: bigint;
    newProtocolSeizeShareMantissa: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewProtocolShareReserveEvent {
  export type InputTuple = [
    oldProtocolShareReserve: AddressLike,
    newProtocolShareReserve: AddressLike
  ];
  export type OutputTuple = [
    oldProtocolShareReserve: string,
    newProtocolShareReserve: string
  ];
  export interface OutputObject {
    oldProtocolShareReserve: string;
    newProtocolShareReserve: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewReduceReservesBlockDeltaEvent {
  export type InputTuple = [
    oldReduceReservesBlockOrTimestampDelta: BigNumberish,
    newReduceReservesBlockOrTimestampDelta: BigNumberish
  ];
  export type OutputTuple = [
    oldReduceReservesBlockOrTimestampDelta: bigint,
    newReduceReservesBlockOrTimestampDelta: bigint
  ];
  export interface OutputObject {
    oldReduceReservesBlockOrTimestampDelta: bigint;
    newReduceReservesBlockOrTimestampDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewReserveFactorEvent {
  export type InputTuple = [
    oldReserveFactorMantissa: BigNumberish,
    newReserveFactorMantissa: BigNumberish
  ];
  export type OutputTuple = [
    oldReserveFactorMantissa: bigint,
    newReserveFactorMantissa: bigint
  ];
  export interface OutputObject {
    oldReserveFactorMantissa: bigint;
    newReserveFactorMantissa: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewShortfallContractEvent {
  export type InputTuple = [
    oldShortfall: AddressLike,
    newShortfall: AddressLike
  ];
  export type OutputTuple = [oldShortfall: string, newShortfall: string];
  export interface OutputObject {
    oldShortfall: string;
    newShortfall: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolSeizeEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemEvent {
  export type InputTuple = [
    redeemer: AddressLike,
    redeemAmount: BigNumberish,
    redeemTokens: BigNumberish,
    accountBalance: BigNumberish
  ];
  export type OutputTuple = [
    redeemer: string,
    redeemAmount: bigint,
    redeemTokens: bigint,
    accountBalance: bigint
  ];
  export interface OutputObject {
    redeemer: string;
    redeemAmount: bigint;
    redeemTokens: bigint;
    accountBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayBorrowEvent {
  export type InputTuple = [
    payer: AddressLike,
    borrower: AddressLike,
    repayAmount: BigNumberish,
    accountBorrows: BigNumberish,
    totalBorrows: BigNumberish
  ];
  export type OutputTuple = [
    payer: string,
    borrower: string,
    repayAmount: bigint,
    accountBorrows: bigint,
    totalBorrows: bigint
  ];
  export interface OutputObject {
    payer: string;
    borrower: string;
    repayAmount: bigint;
    accountBorrows: bigint;
    totalBorrows: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReservesAddedEvent {
  export type InputTuple = [
    benefactor: AddressLike,
    addAmount: BigNumberish,
    newTotalReserves: BigNumberish
  ];
  export type OutputTuple = [
    benefactor: string,
    addAmount: bigint,
    newTotalReserves: bigint
  ];
  export interface OutputObject {
    benefactor: string;
    addAmount: bigint;
    newTotalReserves: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpreadReservesReducedEvent {
  export type InputTuple = [
    protocolShareReserve: AddressLike,
    reduceAmount: BigNumberish,
    newTotalReserves: BigNumberish
  ];
  export type OutputTuple = [
    protocolShareReserve: string,
    reduceAmount: bigint,
    newTotalReserves: bigint
  ];
  export interface OutputObject {
    protocolShareReserve: string;
    reduceAmount: bigint;
    newTotalReserves: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SweepTokenEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VenusLendingContract extends BaseContract {
  connect(runner?: ContractRunner | null): VenusLendingContract;
  waitForDeployment(): Promise<this>;

  interface: VenusLendingContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NO_ERROR: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  accessControlManager: TypedContractMethod<[], [string], "view">;

  accrualBlockNumber: TypedContractMethod<[], [bigint], "view">;

  accrueInterest: TypedContractMethod<[], [bigint], "nonpayable">;

  addReserves: TypedContractMethod<
    [addAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  badDebt: TypedContractMethod<[], [bigint], "view">;

  badDebtRecovered: TypedContractMethod<
    [recoveredAmount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  balanceOfUnderlying: TypedContractMethod<
    [owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  blocksOrSecondsPerYear: TypedContractMethod<[], [bigint], "view">;

  borrow: TypedContractMethod<
    [borrowAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  borrowBalanceCurrent: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "nonpayable"
  >;

  borrowBalanceStored: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  borrowBehalf: TypedContractMethod<
    [borrower: AddressLike, borrowAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  borrowIndex: TypedContractMethod<[], [bigint], "view">;

  borrowRatePerBlock: TypedContractMethod<[], [bigint], "view">;

  comptroller: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  exchangeRateCurrent: TypedContractMethod<[], [bigint], "nonpayable">;

  exchangeRateStored: TypedContractMethod<[], [bigint], "view">;

  forceLiquidateBorrow: TypedContractMethod<
    [
      liquidator: AddressLike,
      borrower: AddressLike,
      repayAmount: BigNumberish,
      vTokenCollateral: AddressLike,
      skipLiquidityCheck: boolean
    ],
    [void],
    "nonpayable"
  >;

  getAccountSnapshot: TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        error: bigint;
        vTokenBalance: bigint;
        borrowBalance: bigint;
        exchangeRate: bigint;
      }
    ],
    "view"
  >;

  getBlockNumberOrTimestamp: TypedContractMethod<[], [bigint], "view">;

  getCash: TypedContractMethod<[], [bigint], "view">;

  healBorrow: TypedContractMethod<
    [payer: AddressLike, borrower: AddressLike, repayAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      underlying_: AddressLike,
      comptroller_: AddressLike,
      interestRateModel_: AddressLike,
      initialExchangeRateMantissa_: BigNumberish,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      admin_: AddressLike,
      accessControlManager_: AddressLike,
      riskManagement: VTokenInterface.RiskManagementInitStruct,
      reserveFactorMantissa_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  interestRateModel: TypedContractMethod<[], [string], "view">;

  isTimeBased: TypedContractMethod<[], [boolean], "view">;

  isVToken: TypedContractMethod<[], [boolean], "view">;

  liquidateBorrow: TypedContractMethod<
    [
      borrower: AddressLike,
      repayAmount: BigNumberish,
      vTokenCollateral: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  mint: TypedContractMethod<[mintAmount: BigNumberish], [bigint], "nonpayable">;

  mintBehalf: TypedContractMethod<
    [minter: AddressLike, mintAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  protocolSeizeShareMantissa: TypedContractMethod<[], [bigint], "view">;

  protocolShareReserve: TypedContractMethod<[], [string], "view">;

  redeem: TypedContractMethod<
    [redeemTokens: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  redeemBehalf: TypedContractMethod<
    [redeemer: AddressLike, redeemTokens: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  redeemUnderlying: TypedContractMethod<
    [redeemAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  redeemUnderlyingBehalf: TypedContractMethod<
    [redeemer: AddressLike, redeemAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  reduceReserves: TypedContractMethod<
    [reduceAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  reduceReservesBlockDelta: TypedContractMethod<[], [bigint], "view">;

  reduceReservesBlockNumber: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repayBorrow: TypedContractMethod<
    [repayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  repayBorrowBehalf: TypedContractMethod<
    [borrower: AddressLike, repayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  reserveFactorMantissa: TypedContractMethod<[], [bigint], "view">;

  seize: TypedContractMethod<
    [liquidator: AddressLike, borrower: AddressLike, seizeTokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAccessControlManager: TypedContractMethod<
    [accessControlManager_: AddressLike],
    [void],
    "nonpayable"
  >;

  setInterestRateModel: TypedContractMethod<
    [newInterestRateModel: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolSeizeShare: TypedContractMethod<
    [newProtocolSeizeShareMantissa_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolShareReserve: TypedContractMethod<
    [protocolShareReserve_: AddressLike],
    [void],
    "nonpayable"
  >;

  setReduceReservesBlockDelta: TypedContractMethod<
    [_newReduceReservesBlockOrTimestampDelta: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReserveFactor: TypedContractMethod<
    [newReserveFactorMantissa: BigNumberish],
    [void],
    "nonpayable"
  >;

  setShortfallContract: TypedContractMethod<
    [shortfall_: AddressLike],
    [void],
    "nonpayable"
  >;

  shortfall: TypedContractMethod<[], [string], "view">;

  supplyRatePerBlock: TypedContractMethod<[], [bigint], "view">;

  sweepToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalBorrows: TypedContractMethod<[], [bigint], "view">;

  totalBorrowsCurrent: TypedContractMethod<[], [bigint], "nonpayable">;

  totalReserves: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [src: AddressLike, dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  underlying: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NO_ERROR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "accessControlManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accrualBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accrueInterest"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "addReserves"
  ): TypedContractMethod<[addAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "badDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "badDebtRecovered"
  ): TypedContractMethod<
    [recoveredAmount_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfUnderlying"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "blocksOrSecondsPerYear"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<[borrowAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "borrowBalanceCurrent"
  ): TypedContractMethod<[account: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "borrowBalanceStored"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowBehalf"
  ): TypedContractMethod<
    [borrower: AddressLike, borrowAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowRatePerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "comptroller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exchangeRateCurrent"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "exchangeRateStored"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forceLiquidateBorrow"
  ): TypedContractMethod<
    [
      liquidator: AddressLike,
      borrower: AddressLike,
      repayAmount: BigNumberish,
      vTokenCollateral: AddressLike,
      skipLiquidityCheck: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAccountSnapshot"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        error: bigint;
        vTokenBalance: bigint;
        borrowBalance: bigint;
        exchangeRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBlockNumberOrTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCash"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "healBorrow"
  ): TypedContractMethod<
    [payer: AddressLike, borrower: AddressLike, repayAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      underlying_: AddressLike,
      comptroller_: AddressLike,
      interestRateModel_: AddressLike,
      initialExchangeRateMantissa_: BigNumberish,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      admin_: AddressLike,
      accessControlManager_: AddressLike,
      riskManagement: VTokenInterface.RiskManagementInitStruct,
      reserveFactorMantissa_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interestRateModel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isTimeBased"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVToken"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidateBorrow"
  ): TypedContractMethod<
    [
      borrower: AddressLike,
      repayAmount: BigNumberish,
      vTokenCollateral: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[mintAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "mintBehalf"
  ): TypedContractMethod<
    [minter: AddressLike, mintAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolSeizeShareMantissa"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolShareReserve"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<[redeemTokens: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "redeemBehalf"
  ): TypedContractMethod<
    [redeemer: AddressLike, redeemTokens: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemUnderlying"
  ): TypedContractMethod<[redeemAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "redeemUnderlyingBehalf"
  ): TypedContractMethod<
    [redeemer: AddressLike, redeemAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reduceReserves"
  ): TypedContractMethod<[reduceAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reduceReservesBlockDelta"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reduceReservesBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayBorrow"
  ): TypedContractMethod<[repayAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "repayBorrowBehalf"
  ): TypedContractMethod<
    [borrower: AddressLike, repayAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveFactorMantissa"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seize"
  ): TypedContractMethod<
    [liquidator: AddressLike, borrower: AddressLike, seizeTokens: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAccessControlManager"
  ): TypedContractMethod<
    [accessControlManager_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInterestRateModel"
  ): TypedContractMethod<
    [newInterestRateModel: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolSeizeShare"
  ): TypedContractMethod<
    [newProtocolSeizeShareMantissa_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolShareReserve"
  ): TypedContractMethod<
    [protocolShareReserve_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReduceReservesBlockDelta"
  ): TypedContractMethod<
    [_newReduceReservesBlockOrTimestampDelta: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReserveFactor"
  ): TypedContractMethod<
    [newReserveFactorMantissa: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setShortfallContract"
  ): TypedContractMethod<[shortfall_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shortfall"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supplyRatePerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sweepToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalBorrows"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBorrowsCurrent"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "totalReserves"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [src: AddressLike, dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "underlying"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AccrueInterest"
  ): TypedContractEvent<
    AccrueInterestEvent.InputTuple,
    AccrueInterestEvent.OutputTuple,
    AccrueInterestEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BadDebtIncreased"
  ): TypedContractEvent<
    BadDebtIncreasedEvent.InputTuple,
    BadDebtIncreasedEvent.OutputTuple,
    BadDebtIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "BadDebtRecovered"
  ): TypedContractEvent<
    BadDebtRecoveredEvent.InputTuple,
    BadDebtRecoveredEvent.OutputTuple,
    BadDebtRecoveredEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "HealBorrow"
  ): TypedContractEvent<
    HealBorrowEvent.InputTuple,
    HealBorrowEvent.OutputTuple,
    HealBorrowEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidateBorrow"
  ): TypedContractEvent<
    LiquidateBorrowEvent.InputTuple,
    LiquidateBorrowEvent.OutputTuple,
    LiquidateBorrowEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "NewAccessControlManager"
  ): TypedContractEvent<
    NewAccessControlManagerEvent.InputTuple,
    NewAccessControlManagerEvent.OutputTuple,
    NewAccessControlManagerEvent.OutputObject
  >;
  getEvent(
    key: "NewComptroller"
  ): TypedContractEvent<
    NewComptrollerEvent.InputTuple,
    NewComptrollerEvent.OutputTuple,
    NewComptrollerEvent.OutputObject
  >;
  getEvent(
    key: "NewMarketInterestRateModel"
  ): TypedContractEvent<
    NewMarketInterestRateModelEvent.InputTuple,
    NewMarketInterestRateModelEvent.OutputTuple,
    NewMarketInterestRateModelEvent.OutputObject
  >;
  getEvent(
    key: "NewProtocolSeizeShare"
  ): TypedContractEvent<
    NewProtocolSeizeShareEvent.InputTuple,
    NewProtocolSeizeShareEvent.OutputTuple,
    NewProtocolSeizeShareEvent.OutputObject
  >;
  getEvent(
    key: "NewProtocolShareReserve"
  ): TypedContractEvent<
    NewProtocolShareReserveEvent.InputTuple,
    NewProtocolShareReserveEvent.OutputTuple,
    NewProtocolShareReserveEvent.OutputObject
  >;
  getEvent(
    key: "NewReduceReservesBlockDelta"
  ): TypedContractEvent<
    NewReduceReservesBlockDeltaEvent.InputTuple,
    NewReduceReservesBlockDeltaEvent.OutputTuple,
    NewReduceReservesBlockDeltaEvent.OutputObject
  >;
  getEvent(
    key: "NewReserveFactor"
  ): TypedContractEvent<
    NewReserveFactorEvent.InputTuple,
    NewReserveFactorEvent.OutputTuple,
    NewReserveFactorEvent.OutputObject
  >;
  getEvent(
    key: "NewShortfallContract"
  ): TypedContractEvent<
    NewShortfallContractEvent.InputTuple,
    NewShortfallContractEvent.OutputTuple,
    NewShortfallContractEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolSeize"
  ): TypedContractEvent<
    ProtocolSeizeEvent.InputTuple,
    ProtocolSeizeEvent.OutputTuple,
    ProtocolSeizeEvent.OutputObject
  >;
  getEvent(
    key: "Redeem"
  ): TypedContractEvent<
    RedeemEvent.InputTuple,
    RedeemEvent.OutputTuple,
    RedeemEvent.OutputObject
  >;
  getEvent(
    key: "RepayBorrow"
  ): TypedContractEvent<
    RepayBorrowEvent.InputTuple,
    RepayBorrowEvent.OutputTuple,
    RepayBorrowEvent.OutputObject
  >;
  getEvent(
    key: "ReservesAdded"
  ): TypedContractEvent<
    ReservesAddedEvent.InputTuple,
    ReservesAddedEvent.OutputTuple,
    ReservesAddedEvent.OutputObject
  >;
  getEvent(
    key: "SpreadReservesReduced"
  ): TypedContractEvent<
    SpreadReservesReducedEvent.InputTuple,
    SpreadReservesReducedEvent.OutputTuple,
    SpreadReservesReducedEvent.OutputObject
  >;
  getEvent(
    key: "SweepToken"
  ): TypedContractEvent<
    SweepTokenEvent.InputTuple,
    SweepTokenEvent.OutputTuple,
    SweepTokenEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AccrueInterest(uint256,uint256,uint256,uint256)": TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;
    AccrueInterest: TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BadDebtIncreased(address,uint256,uint256,uint256)": TypedContractEvent<
      BadDebtIncreasedEvent.InputTuple,
      BadDebtIncreasedEvent.OutputTuple,
      BadDebtIncreasedEvent.OutputObject
    >;
    BadDebtIncreased: TypedContractEvent<
      BadDebtIncreasedEvent.InputTuple,
      BadDebtIncreasedEvent.OutputTuple,
      BadDebtIncreasedEvent.OutputObject
    >;

    "BadDebtRecovered(uint256,uint256)": TypedContractEvent<
      BadDebtRecoveredEvent.InputTuple,
      BadDebtRecoveredEvent.OutputTuple,
      BadDebtRecoveredEvent.OutputObject
    >;
    BadDebtRecovered: TypedContractEvent<
      BadDebtRecoveredEvent.InputTuple,
      BadDebtRecoveredEvent.OutputTuple,
      BadDebtRecoveredEvent.OutputObject
    >;

    "Borrow(address,uint256,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "HealBorrow(address,address,uint256)": TypedContractEvent<
      HealBorrowEvent.InputTuple,
      HealBorrowEvent.OutputTuple,
      HealBorrowEvent.OutputObject
    >;
    HealBorrow: TypedContractEvent<
      HealBorrowEvent.InputTuple,
      HealBorrowEvent.OutputTuple,
      HealBorrowEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LiquidateBorrow(address,address,uint256,address,uint256)": TypedContractEvent<
      LiquidateBorrowEvent.InputTuple,
      LiquidateBorrowEvent.OutputTuple,
      LiquidateBorrowEvent.OutputObject
    >;
    LiquidateBorrow: TypedContractEvent<
      LiquidateBorrowEvent.InputTuple,
      LiquidateBorrowEvent.OutputTuple,
      LiquidateBorrowEvent.OutputObject
    >;

    "Mint(address,uint256,uint256,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "NewAccessControlManager(address,address)": TypedContractEvent<
      NewAccessControlManagerEvent.InputTuple,
      NewAccessControlManagerEvent.OutputTuple,
      NewAccessControlManagerEvent.OutputObject
    >;
    NewAccessControlManager: TypedContractEvent<
      NewAccessControlManagerEvent.InputTuple,
      NewAccessControlManagerEvent.OutputTuple,
      NewAccessControlManagerEvent.OutputObject
    >;

    "NewComptroller(address,address)": TypedContractEvent<
      NewComptrollerEvent.InputTuple,
      NewComptrollerEvent.OutputTuple,
      NewComptrollerEvent.OutputObject
    >;
    NewComptroller: TypedContractEvent<
      NewComptrollerEvent.InputTuple,
      NewComptrollerEvent.OutputTuple,
      NewComptrollerEvent.OutputObject
    >;

    "NewMarketInterestRateModel(address,address)": TypedContractEvent<
      NewMarketInterestRateModelEvent.InputTuple,
      NewMarketInterestRateModelEvent.OutputTuple,
      NewMarketInterestRateModelEvent.OutputObject
    >;
    NewMarketInterestRateModel: TypedContractEvent<
      NewMarketInterestRateModelEvent.InputTuple,
      NewMarketInterestRateModelEvent.OutputTuple,
      NewMarketInterestRateModelEvent.OutputObject
    >;

    "NewProtocolSeizeShare(uint256,uint256)": TypedContractEvent<
      NewProtocolSeizeShareEvent.InputTuple,
      NewProtocolSeizeShareEvent.OutputTuple,
      NewProtocolSeizeShareEvent.OutputObject
    >;
    NewProtocolSeizeShare: TypedContractEvent<
      NewProtocolSeizeShareEvent.InputTuple,
      NewProtocolSeizeShareEvent.OutputTuple,
      NewProtocolSeizeShareEvent.OutputObject
    >;

    "NewProtocolShareReserve(address,address)": TypedContractEvent<
      NewProtocolShareReserveEvent.InputTuple,
      NewProtocolShareReserveEvent.OutputTuple,
      NewProtocolShareReserveEvent.OutputObject
    >;
    NewProtocolShareReserve: TypedContractEvent<
      NewProtocolShareReserveEvent.InputTuple,
      NewProtocolShareReserveEvent.OutputTuple,
      NewProtocolShareReserveEvent.OutputObject
    >;

    "NewReduceReservesBlockDelta(uint256,uint256)": TypedContractEvent<
      NewReduceReservesBlockDeltaEvent.InputTuple,
      NewReduceReservesBlockDeltaEvent.OutputTuple,
      NewReduceReservesBlockDeltaEvent.OutputObject
    >;
    NewReduceReservesBlockDelta: TypedContractEvent<
      NewReduceReservesBlockDeltaEvent.InputTuple,
      NewReduceReservesBlockDeltaEvent.OutputTuple,
      NewReduceReservesBlockDeltaEvent.OutputObject
    >;

    "NewReserveFactor(uint256,uint256)": TypedContractEvent<
      NewReserveFactorEvent.InputTuple,
      NewReserveFactorEvent.OutputTuple,
      NewReserveFactorEvent.OutputObject
    >;
    NewReserveFactor: TypedContractEvent<
      NewReserveFactorEvent.InputTuple,
      NewReserveFactorEvent.OutputTuple,
      NewReserveFactorEvent.OutputObject
    >;

    "NewShortfallContract(address,address)": TypedContractEvent<
      NewShortfallContractEvent.InputTuple,
      NewShortfallContractEvent.OutputTuple,
      NewShortfallContractEvent.OutputObject
    >;
    NewShortfallContract: TypedContractEvent<
      NewShortfallContractEvent.InputTuple,
      NewShortfallContractEvent.OutputTuple,
      NewShortfallContractEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProtocolSeize(address,address,uint256)": TypedContractEvent<
      ProtocolSeizeEvent.InputTuple,
      ProtocolSeizeEvent.OutputTuple,
      ProtocolSeizeEvent.OutputObject
    >;
    ProtocolSeize: TypedContractEvent<
      ProtocolSeizeEvent.InputTuple,
      ProtocolSeizeEvent.OutputTuple,
      ProtocolSeizeEvent.OutputObject
    >;

    "Redeem(address,uint256,uint256,uint256)": TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
    Redeem: TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;

    "RepayBorrow(address,address,uint256,uint256,uint256)": TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;
    RepayBorrow: TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;

    "ReservesAdded(address,uint256,uint256)": TypedContractEvent<
      ReservesAddedEvent.InputTuple,
      ReservesAddedEvent.OutputTuple,
      ReservesAddedEvent.OutputObject
    >;
    ReservesAdded: TypedContractEvent<
      ReservesAddedEvent.InputTuple,
      ReservesAddedEvent.OutputTuple,
      ReservesAddedEvent.OutputObject
    >;

    "SpreadReservesReduced(address,uint256,uint256)": TypedContractEvent<
      SpreadReservesReducedEvent.InputTuple,
      SpreadReservesReducedEvent.OutputTuple,
      SpreadReservesReducedEvent.OutputObject
    >;
    SpreadReservesReduced: TypedContractEvent<
      SpreadReservesReducedEvent.InputTuple,
      SpreadReservesReducedEvent.OutputTuple,
      SpreadReservesReducedEvent.OutputObject
    >;

    "SweepToken(address)": TypedContractEvent<
      SweepTokenEvent.InputTuple,
      SweepTokenEvent.OutputTuple,
      SweepTokenEvent.OutputObject
    >;
    SweepToken: TypedContractEvent<
      SweepTokenEvent.InputTuple,
      SweepTokenEvent.OutputTuple,
      SweepTokenEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
